# 注册到eureka-server上
eureka:
  client:
    # 是否将eureka自身作为应用注册到eureka注册中心
    register-with-eureka: false
    # 客户端是否获取eureka服务器注册表上的注册信息，默认为true
    fetch-registry: true
    # 设置拉取服务注册信息时间（缺省为60s）
    registry-fetch-interval-seconds: 5
    # Eureka服务
    serviceUrl:
      #服务注册中心地址
      defaultZone: http://127.0.0.1:8000/eureka/

#网关配置
zuul:
  ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin
  max:
    host:
      # 并发处理数，值越大越好，但到到达一个临界点之后，就不会提高响应速度了
      connections:  500
  host:
    # 连接时间semaphores
    connect-timeout-millis: 60000
  #路由配置
  routes:
    user:
      #代理接口路径
      path: /user/**
      serviceId: user-api
      #是否带当前前缀,true:不带，false:不带
      stripPrefix: true
    admin:
      #代理接口路径
      path: /admin/**
      serviceId: admin-server
      #是否带当前前缀,true:不带，false:不带
      stripPrefix: true

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 60000 # Hystrix超时时间
    store-api:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 60000

ribbon:
  ReadTimeout: 60000 # 处理时间
  ConnectTimeout: 60000 # 连接时间
  # 同一实例最大重试次数，不包括首次调用
  MaxAutoRetries: 0
  # 重试其他实例的最大重试次数，不包括首次所选的server
  MaxAutoRetriesNextServer: 1
  # 最大http连接数，越大越好，但到到达一个临界点之后，就不会提高响应速度
  MaxTotalHttpConnections: 2000

feign:
  httpclient:
    enabled: true

spring:
  #数据库源设置
  datasource:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: 123456
    druid:
      #初始化连接数量，最大最小连接数
      initialSize: 5
      maxActive: 10
      minIdle: 3
      #获取连接等待超时的时间
      maxWait: 600000
      #超过时间限制是否回收
      removeAbandoned: true
      #超过时间限制多长
      removeAbandonedTimeout: 180
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 600000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      #用来检测连接是否有效的sql，要求是一个查询语句
      validationQuery: SELECT 1 FROM DUAL
      #申请连接的时候检测
      testWhileIdle: true
      #申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnBorrow: false
      #归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnReturn: false
      #打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 50
      #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      #监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall
      filters: stat

  # Redis配置
  redis:
    # redis服务器地址（默认为localhost）
    host: 127.0.0.1
    # redis端口（默认为6379）
    port: 6379
    # redis访问密码（默认为空）
    password:
    # redis数据库索引（默认为0），我们使用索引为3的数据库，避免和其他数据库冲突
    database: 0
    # 连接超时时间（毫秒）
    timeout: 10000
    pool:
      # 最大空闲连接数（默认为8，负数表示无限）
      max-idle: 20
      # 最小空闲连接数（默认为0，该值只有为正数才有作用）
      min-idle: 5
      # 最大可用连接数（默认为8，负数表示无限）
      max-active: 20
      # 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）
      max-wait: 2

logging:
  level:
    com.netflix: debug